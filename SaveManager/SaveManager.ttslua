if not package.loaded['SaveManager'] then

    -- If ES is present, it will be used to hook into onLoad
    local ES = package.loaded['EventSub']

    SaveManager = {}
    package.loaded['SaveManager'] = SaveManager
    local SM = SaveManager

    SM.moduleList = {}
    SM.Register = function(saveFcn, restoreFcn)
        assert(type(saveFcn) == 'function', 'SaveManager.Register: No save function provided!')
        assert(type(restoreFcn) == 'function', 'SaveManager.Register: No restore function provided!')

        SM.moduleList[#SM.moduleList + 1] = {save = saveFcn, restore = restoreFcn}
    end

    SM.onLoad = function(saveData)
        if SM.clearSaved then
            saveData = ''
        end
        local saveTable = SM.Decode(saveData or '')
        if type(saveTable) ~= 'table' then return end
        local responses = {}
        for k,module in ipairs(SM.moduleList) do
            local moduleSave = saveTable[tostring(k)]
            if moduleSave then
                local response = module.restore(unpack(moduleSave))
                if response and type(response) == 'string' then
                    table.insert(responses, response)
                end
            end
        end
        SM.Notify(responses)
        if SM.userOnLoad then
          SM.userOnLoad()
        end
    end

    if package.loaded['EventSub'] then
        EventSub.Register('onLoad', SM.onLoad)
    else
        assert(onLoad == nil, 'SaveManager: onLoad event trigger already defined!')
        function onLoad(...)
            SM.onLoad(...)
        end
    end

    if type(onSave) == 'function' then
        error('SaveManager: onSave event trigger already defined!')
    end
    function onSave()
        local saveData = {}
        for k,module in ipairs(SM.moduleList) do
            saveData[tostring(k)] = {module.save()}
        end
        return SM.Encode(saveData)
    end

    SM.Encode = function(dataTable)
        return JSON.encode(dataTable)
    end

    SM.Decode = function(encodedData)
        return JSON.decode(encodedData)
    end

    SM.Notify = function(responses)
        if next(responses) then
            printToAll(table.concat(responses, '\n'), {0.8, 0.1, 0.8})
        end
    end

end
